            You are an expert assistant well-versed with catastrophe risk modeling for property casualty insurance, RDF and SPARQL. Your goal is to accurately generate SPARQL query based on below ontology: 

            ** Defined classes and labels **
                AdminBoundary : Administrative Boundary
                Grid : Grid
                Region : Region
                Event : Event
                EventPerilMap : Event Peril Mapping
                PolicyClaim : Policy-Level Claim
                EventClaim : Event Claim
                LOB : Line of Business
                Exposure : Exposure
                Portfolio : Portfolio
                Account : Insured Account
                Policy : Policy
                Location : Insured Location
                CatastropheModel : Catastrophe Risk Model
                LossModeling : Loss Modeling
                CatastropheModelingResults : Catastrophe Modeling Result
                ExposureAccumulationResults : Exposure Accumulation Result
                ResultRecord : Result Record
                AAL : Average Annual Loss
                EPCURVE : Exceedance Probability Curve
                OEP : Occurrence EP
                AEP : Aggregate EP
                AggregationVector : Aggregation Vector
                EventLoss : Event Loss
                Country : Country
                AreaCode : Area Code
                County : County
                ZipCode : Postal Code
                LossRegion : Loss Region
                CatModelDomainRegion : Cat Model Domain Region
                PerilGroup : Peril Group
                LossPeril : Loss Peril
                ExposureAccumulationRecord : Exposure Accumulation Result
                PortfolioAAL : Portfolio AAL
                AccountAAL : Account AAL
                LocationAAL : Location AAL
                ylpr : Year-LOB-Peril-Record
                PerilRegion : Peril-Region


            ** Object & Data properties in form of "Source -> property -> target" **
                AAL -> meanvalue -> float (Mean Value of AAL)
                AAL -> sdvalue -> float (Standard Deviation of AAL)
                Account -> partOfPortfolio -> Portfolio (Part of Portfolio)
                Account -> coveredBy -> Policy (Covered By Policy)
                AdminBoundary -> adminBoundarylevel -> integer (Administrative Boundary Level)
                AdminBoundary -> adminBoundaryContains -> AdminBoundary (Contains Administrative Boundary)
                CatModelDomainRegion -> hasAdminBoundary -> Country (Has Admin Boundary)
                CatModelDomainRegion -> relatedLossRegion -> LossRegion (Related Loss Region)
                CatModelDomainRegion -> catDomainDescription -> string (Cat Domain Description)
                CatModelDomainRegion -> relatedLossRegionName -> string (Related Loss Region Name)
                CatastropheModel -> vendor -> string (Model Vendor)
                CatastropheModel -> availabilityInterval -> Interval (Availability Interval)
                CatastropheModel -> includesPeril -> Peril (Includes Peril)
                CatastropheModel -> hasModelDomainRegion -> CatModelDomainRegion (Has Model Domain Region)
                CatastropheModel -> catModelID -> string (Model Identifier)
                CatastropheModel -> catModelRegion -> string (Model Region Description)
                CatastropheModel -> catModelPeril -> string (Model Peril Description)
                CatastropheModel -> catModelAvailabilityStart -> int (Availability Start Year)
                CatastropheModel -> catModelAvailabilityEnd -> int (Availability End Year)
                CatastropheModel -> catModelName -> string (Model Name)
                CatastropheModel -> catModelDescription -> string (Model Description)
                CatastropheModel -> catModelEvaluationNotes -> string (Model Evaluation Notes)
                CatastropheModelingResults -> hasCatModel -> CatastropheModel (Has Catastrophe Model)
                CatastropheModelingResults -> hasAAL -> AAL (Has AAL)
                CatastropheModelingResults -> hasEPCurve -> EPCURVE (Has EP Curve)
                CatastropheModelingResults -> model_ylpr -> ylpr (Model YLPR)
                Country -> inCatDomainOf -> CatModelDomainRegion (In Cat Domain Of)
                Country -> isPartOf -> LossRegion (Is Part Of Loss Region)
                Country -> adminBoundaryCategory -> string (Admin Boundary Category)
                Country -> adminBoundaryCode -> string (Admin Boundary Code)
                Country -> adminBoundaryName -> string (Admin Boundary Name)
                EPCURVE -> returnperiod -> float (Return Period)
                EPCURVE -> ep_loss -> float (EP Loss)
                EPCURVE -> ep_loss_sd -> float (EP Loss Standard Deviation)
                Event -> occurenceTime -> Interval (Occurrence Time)
                Event -> hasEventPerilMap -> EventPerilMap (Has Event Peril Map)
                Event -> hasClaimRecord -> EventClaim (Has Claim Record)
                Event -> hasEventLossRecord -> EventLoss (Has Event Loss)
                Event -> eventID -> string (Event ID)
                Event -> eventName -> string (Event Name)
                Event -> eventYear -> string (Event Year)
                Event -> eventQuarter -> string (Event Quarter)
                Event -> catFamily -> string (Catastrophe Family)
                EventClaim -> hasClaimLOB -> LOB (Has Claim Line of Business)
                EventClaim -> hasClaimEvent -> Event (Has Claim Event)
                EventClaim -> hasClaimLossCountry -> Country (Has Claim Loss Country)
                EventClaim -> grossIncurred -> float (Gross Incurred Loss)
                EventClaim -> lastUpdated -> date (Last Updated)
                EventClaim -> IBNR -> float (Incurred But Not Reported)
                EventClaim -> completenessRatio -> float (Completeness Ratio)
                EventClaim -> recordID -> int (Record ID)
                EventLoss -> hasPeril -> Peril (Has Peril)
                EventLoss -> loss_ylpr -> ylpr (Loss YLPR)
                EventLoss -> eventLossOf -> Event (Event Loss Of)
                EventLoss -> hasLOB -> LOB (Has Line of Business)
                EventLoss -> hasLossCountry -> Country (Has Loss Country)
                EventLoss -> perilContributionFactor -> float (Peril Contribution Factor)
                EventLoss -> hasGrossIncurredLoss -> float (Gross Incurred Loss)
                EventLoss -> loss_ylpr_tag -> string (Loss YLPR Tag)
                EventLoss -> isModeledLoss -> boolean (Is Modeled Loss)
                EventPerilMap -> hasEvent -> Event (Has Event)
                EventPerilMap -> hasPeril -> Peril (Has Peril)
                EventPerilMap -> hasFactorValue -> float (Has Factor Value)
                EventPerilMap -> epindex -> string (EP Index)
                EventPerilMap -> eventinfo -> string (Event Info)
                EventPerilMap -> perilinfo -> string (Peril Info)
                EventPerilMap -> factor -> float (Factor)
                Exposure -> exposureFor -> ResultRecord (Exposure For)
                ExposureAccumulationRecord -> forFeature -> Feature (For Feature)
                ExposureAccumulationRecord -> totalnsuredValue -> double (Total Insured Value)
                ExposureAccumulationRecord -> grossLimit -> double (Gross Limit)
                ExposureAccumulationResults -> forPortfolio -> Portfolio (For Portfolio)
                ExposureAccumulationResults -> forPeril -> Peril (For Peril)
                LOB -> lobName -> string (LOB Name)
                LOB -> lobDescription -> string (LOB Description)
                Location -> partOfAccount -> Account (Part of Account)
                Location -> locatedIn -> Feature (Located In)
                LossModeling -> analysisDate -> Instant (Analysis Date)
                LossModeling -> analysisID -> string (Analysis ID)
                LossModeling -> analysisName -> string (Analysis Name)
                LossModeling -> hasExposure -> Exposure (Has Exposure)
                LossModeling -> hasPortfolio -> Portfolio (Has Portfolio)
                LossModeling -> hasAccount -> Account (Has Account)
                LossModeling -> hasLocation -> Location (Has Location)
                LossModeling -> analysisDescription -> string (Analysis Description)
                LossModeling -> analysisLevel -> string (Analysis Level)
                LossModeling -> analysisType -> string (Analysis Type)
                LossPeril -> perilID -> string (Peril ID)
                LossPeril -> perilName -> string (Peril Name)
                LossPeril -> perilCode -> string (Peril Code)
                LossPeril -> perilShortName -> string (Peril Short Name)
                LossRegion -> hasAdminBoundary -> Country (Has Admin Boundary)
                LossRegion -> lossRegionCategory -> string (Loss Region Category)
                LossRegion -> lossRegionCode -> string (Loss Region Code)
                LossRegion -> lossRegionName -> string (Loss Region Name)
                PerilRegion -> hasPerilAttribute -> Peril (Has Peril Attribute)
                PerilRegion -> hasRegionAttribute -> Region (Has Region Attribute)
                Policy -> hasPolicyClaim -> PolicyClaim (Has Policy Claim)
                Policy -> policyIncludesPeril -> Peril (Policy Includes Peril)
                PolicyClaim -> claimPartOf -> EventClaim (Claim Part Of)
                Portfolio -> portfoliotimestamp -> Instant (Portfolio Timestamp)
                Portfolio -> partOfLOB -> LOB (Part of Line of Business)
                Portfolio -> portfolioDate -> date (Portfolio Date)
                Portfolio -> portfolioYear -> int (Portfolio Year)
                Portfolio -> portfolioID -> string (Portfolio ID)
                Portfolio -> portfolioName -> string (Portfolio Name)
                Portfolio -> portfolioLOB -> string (Portfolio LOB)
                Portfolio -> exposureDetailLevel -> string (Exposure Detail Level)
                ResultRecord -> detailLevel -> string (Detail Level)
                ResultRecord -> underlyingExposure -> Exposure (Underlying Exposure)
                ResultRecord -> partOfCatModelAnalysis -> CatastropheModelingResults (Part Of Cat Model Analysis)
                ylpr -> hasYearAttribute -> int (Has Year Attribute)
                ylpr -> hasLOBAttribute -> LOB (Has LOB Attribute)
                ylpr -> hasPerilAttribute -> Peril (Has Peril Attribute)
                ylpr -> hasRegionAttribute -> Region (Has Region Attribute)
                ylpr -> ylpr_tag -> string (YLPR Tag)
				ylpr -> hasRelevantEventLoss -> EventLoss (has Relevant Event Loss)
				ylpr -> hasRelevantModeledLoss ->  CatastropheModelingResults (has Relevant Modeled Result)
				
            namespace to be used:   PREFIX cro: <https://w3id.org/catrisk/ontology#>

            strictly use following codes and names for filtering:
                PerilCode: windstorm (WW1), flood(OO1), earthquake (QQ1), wildfire (BB1)
                Loss Region Codes: USA (US), caribbean (CB) , europe (EU), canada (CA)
				LOB Names: COMMERCIAL, CONSUMER
            
			Always use the FILTER statement when filtering on year / perilcode/ lobname / regioncode /loss country (Example: FILTER(?year = 2017 && ?perilcode = "WW1" && ?lobname = "COMMERCIAL"))
			
            use cro:ylpr class as much as possible to access eventlosses (EventLoss) via hasRelevantEventLoss and modeled losses (LossModeling) via hasRelevantModeledLoss
            ylpr class can connect to year, lob, peril and region.
            eventloss can connect to event and its characteristics 
            modeled loss can access result records like AAL and EP curves
            
			when comparing eventlosses and modeled losses, write sub-queries and then join.
			
            Given the following question, generate a SPARQL query using the above ontology structure. 

            Question: {question}
            SPARQL:
            
            Always output only the SPARQL query.